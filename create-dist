#!/bin/bash
# INTEL CONFIDENTIAL - For Intel Internal Use Only

shopt -o -s nounset

declare -r SCRIPT_NAME='create-dist'

declare -r SAMPLES_VERSION='4.2.0'
declare -r    DOCS_VERSION='4.2.0'

declare -r AUTORECONF="`which autoreconf`" 2>/dev/null
[ "x${AUTORECONF}" = x ] && exit 20
declare -r CP="`which cp`" 2>/dev/null
[ "x${CP}" = x ] && exit 21
declare -r FIND="`which find`" 2>/dev/null
[ "x${FIND}" = x ] && exit 22
declare -r GIT="`which git`" 2>/dev/null
[ "x${GIT}" = x ] && exit 23
declare -r MAKE="`which make`" 2>/dev/null
[ "x${MAKE}" = x ] && exit 24
declare -r MKDIR="`which mkdir`" 2>/dev/null
[ "x${MKDIR}" = x ] && exit 25
declare -r MKTEMP="`which mktemp`" 2>/dev/null
[ "x${MKTEMP}" = x ] && exit 26
declare -r MV="`which mv`" 2>/dev/null
[ "x${MV}" = x ] && exit 27
declare -r RM="`which rm`" 2>/dev/null
[ "x${RM}" = x ] && exit 28
declare -r TAR="`which tar`" 2>/dev/null
[ "x${TAR}" = x ] && exit 29

set -e

declare KERNEL_VPATH=''
declare USER_VPATH=''
declare SAMPLES_TMPDIR=''
declare DOCS_TMPDIR=''

on_exit() {
   local -r remove=true
   if ${remove} ; then
      [ -d "${KERNEL_VPATH}" ] && ${RM} -rf "${KERNEL_VPATH}"
      [ -d "${USER_VPATH}" ] && ${RM} -rf "${USER_VPATH}"
      [ -d "${SAMPLES_TMPDIR}" ] && ${RM} -rf "${SAMPLES_TMPDIR}"
      [ -d "${DOCS_TMPDIR}" ] && ${RM} -rf "${DOCS_TMPDIR}"
   fi
}
trap 'on_exit' EXIT

on_sigint() {
   trap - SIGINT
   exit 99
}
trap 'on_sigint' SIGINT

create_kernel_dist() {
   local -r d="${PWD}/aalkernel"
   local -r regex='aalkernel-[[:digit:]]+[.][[:digit:]]+[.][[:digit:]]+'
   local    x
   local    tmp
   local    renamed

   pushd "$d" >/dev/null 2>&1
   ${AUTORECONF} -vi
   popd >/dev/null 2>&1

   KERNEL_VPATH="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.k.XXXXXXXXXX"`"
   pushd "${KERNEL_VPATH}" >/dev/null 2>&1

   $d/configure
   ${MAKE}
   ${MAKE} DESTDIR="${KERNEL_VPATH}/DESTDIR" distcheck

   popd >/dev/null 2>&1

   for x in `${FIND} "${KERNEL_VPATH}" -maxdepth 1 -type f` ; do
      tmp="$x"
      if [[ ${tmp} =~ ${regex} ]]; then
         renamed="${x##*/}"
         renamed="${renamed/.tar.gz/.Dual-BSD-GPLv2-License.tar.gz}"
         ${MV} "$x" "./${renamed}"
         break
      fi
   done
}

create_user_dist() {
   local -r d="${PWD}/aaluser"
   local -r regex='aalsdk-[[:digit:]]+[.][[:digit:]]+[.][[:digit:]]+'
   local    x
   local    tmp
   local    renamed

   pushd "$d" >/dev/null 2>&1
   ${AUTORECONF} -vi
   popd >/dev/null 2>&1

   USER_VPATH="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.u.XXXXXXXXXX"`"
   pushd "${USER_VPATH}" >/dev/null 2>&1

   $d/configure
   ${MAKE}
   ${MAKE} DESTDIR="${USER_VPATH}/DESTDIR" distcheck

   popd >/dev/null 2>&1

   for x in `${FIND} "${USER_VPATH}" -maxdepth 1 -type f` ; do
      tmp="$x"
      if [[ ${tmp} =~ ${regex} ]]; then
         renamed="${x##*/}"
         renamed="${renamed/.tar.gz/.BSD-License.tar.gz}"
         ${MV} "$x" "./${renamed}"
         break
      fi
   done
}

create_samples_dist() {
   local -r d="${PWD}/aalsamples"

   SAMPLES_TMPDIR="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.s.XXXXXXXXXX"`"

   ${MKDIR} -p "${SAMPLES_TMPDIR}/aalsamples-${SAMPLES_VERSION}"

   for x in `${FIND} "$d" -maxdepth 1 -type d` ; do
      [ "x${x##*/}" = "x.git" ] && continue
      [ "x$x" = "x$d" ] && continue
      ${CP} -R "$x" "${SAMPLES_TMPDIR}/aalsamples-${SAMPLES_VERSION}"
   done

   for x in `${FIND} "$d" -maxdepth 1 -type f` ; do
      [ "x${x##*/}" = "x.git" ] && continue
      ${CP} "$x" "${SAMPLES_TMPDIR}/aalsamples-${SAMPLES_VERSION}"
   done

   ${FIND} "${SAMPLES_TMPDIR}/aalsamples-${SAMPLES_VERSION}" -type f \( -iname "*.vcxproj" -o -iname "*.vcxproj.filters" \) -delete

   pushd "${SAMPLES_TMPDIR}" >/dev/null 2>&1
   ${TAR} zcf "aalsamples-${SAMPLES_VERSION}.BSD-License.tar.gz" "aalsamples-${SAMPLES_VERSION}"
   popd >/dev/null 2>&1

   ${MV} "${SAMPLES_TMPDIR}/aalsamples-${SAMPLES_VERSION}.BSD-License.tar.gz" .
}

# Make sure that git submodule aalreldocs is populated.
pre_create_docs_dist() {
   local -r d="${PWD}/aalreldocs"
   local -i files=0

   if [ -d "$d" ]; then
      for x in `${FIND} $d -type f` ; do
         let $(( ++files ))
      done
   fi

   if [ 0 -eq ${files} ]; then
      # Load the submodule
      ${GIT} --git-dir="${PWD}/.git" submodule init
      ${GIT} --git-dir="${PWD}/.git" submodule update aalreldocs
   fi
}

create_docs_dist() {
   pre_create_docs_dist

   local -r d="${PWD}/aalreldocs"

   DOCS_TMPDIR="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.d.XXXXXXXXXX"`"

   ${MKDIR} -p "${DOCS_TMPDIR}/aaldocs-${DOCS_VERSION}"

   for x in 'AAL_Programmers_Guide.pdf' \
            'AAL_SDK_4-1-0_Release_Notes.pdf' \
            'AAL_SDK_Utilities_Users_Guide.pdf' \
            'ASE_UserGuide.pdf' \
            'Readme.MultiPackage.txt' \
            'SPL_Functionality_and_Programming_Flow_v070.pdf'
   do
      ${CP} "$d/$x" "${DOCS_TMPDIR}/aaldocs-${DOCS_VERSION}"
   done

   pushd "${DOCS_TMPDIR}" >/dev/null 2>&1
   ${TAR} zcf "aaldocs-${DOCS_VERSION}.tar.gz" "aaldocs-${DOCS_VERSION}"
   popd >/dev/null 2>&1

   ${MV} "${DOCS_TMPDIR}/aaldocs-${DOCS_VERSION}.tar.gz" .
}

main() {
   create_kernel_dist
   create_user_dist
   create_samples_dist
   create_docs_dist
   [ -f "./Readme.MultiPackage.txt" ] || ${CP} "${PWD}/aalreldocs/Readme.MultiPackage.txt" .
}
main

exit 0
