#!/bin/bash
# INTEL CONFIDENTIAL - For Intel Internal Use Only
# Added garbage to get around hook block nonsense

shopt -o -s nounset

declare -r SCRIPT_NAME='create-dist'

declare -r SAMPLES_VERSION='5.0.2'

die() {
   printf "%s\n" ${1+"$@"}
   exit 13
}

declare -r AUTORECONF="`which autoreconf`" 2>/dev/null
[ "x${AUTORECONF}" = x ] && die "no autoreconf?"
declare -r CP="`which cp`" 2>/dev/null
[ "x${CP}" = x ] && die "no cp?"
declare -r FIND="`which find`" 2>/dev/null
[ "x${FIND}" = x ] && die "no find?"
declare -r GIT="`which git`" 2>/dev/null
[ "x${GIT}" = x ] && die "no git?"
declare -r LN="`which ln`" 2>/dev/null
[ "x${LN}" = x ] && die "no ln?"
declare -r MAKE="`which make`" 2>/dev/null
[ "x${MAKE}" = x ] && die "no make?"
declare -r MKDIR="`which mkdir`" 2>/dev/null
[ "x${MKDIR}" = x ] && die "no mkdir?"
declare -r MKTEMP="`which mktemp`" 2>/dev/null
[ "x${MKTEMP}" = x ] && die "no mktemp?"
declare -r MV="`which mv`" 2>/dev/null
[ "x${MV}" = x ] && die "no mv?"
declare -r RM="`which rm`" 2>/dev/null
[ "x${RM}" = x ] && die "no rm?"
declare -r TAR="`which tar`" 2>/dev/null
[ "x${TAR}" = x ] && die "no tar?"

set -e

declare KERNEL_VPATH=''
declare USER_VPATH=''
declare SAMPLES_TMPDIR=''
declare FINAL_TMPDIR=''
declare TAG=''
declare GIT_COMMIT_HASH=''

# grab tag if it exists
if [ $# -gt 0 ]; then
   TAG=".$1"
fi

on_exit() {
   local -r remove=true
   if ${remove} ; then
      [ -d "${KERNEL_VPATH}" ]   && ${RM} -rf "${KERNEL_VPATH}"
      [ -d "${USER_VPATH}" ]     && ${RM} -rf "${USER_VPATH}"
      [ -d "${SAMPLES_TMPDIR}" ] && ${RM} -rf "${SAMPLES_TMPDIR}"
      [ -d "${FINAL_TMPDIR}" ]   && ${RM} -rf "${FINAL_TMPDIR}"
   fi
}
trap 'on_exit' EXIT

on_sigint() {
   trap - SIGINT
   exit 99
}
trap 'on_sigint' SIGINT

create_kernel_dist() {
   local -r d="${PWD}/aalkernel"
   local -r regex='aalkernel-[[:digit:]]+[.][[:digit:]]+[.][[:digit:]]+'
   local    x
   local    tmp
   local    renamed

   pushd "$d" >/dev/null 2>&1
   ${AUTORECONF} -vi
   popd >/dev/null 2>&1

   KERNEL_VPATH="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.k.XXXXXXXXXX"`"
   pushd "${KERNEL_VPATH}" >/dev/null 2>&1

   $d/configure
   ${MAKE} -j4
   ${MAKE} DESTDIR="${KERNEL_VPATH}/DESTDIR" distcheck

   popd >/dev/null 2>&1

   for x in `${FIND} "${KERNEL_VPATH}" -maxdepth 1 -type f` ; do
      tmp="$x"
      if [[ ${tmp} =~ ${regex} ]]; then
         renamed="${x##*/}"
         renamed="${renamed/.tar.gz/.Dual-BSD-GPLv2-License${TAG}-${GIT_COMMIT_HASH}.tar.gz}"
         ${MV} "$x" "./${renamed}"
         break
      fi
   done
}

create_user_dist() {
   local -r d="${PWD}/aaluser"
   local -r regex='aalsdk-[[:digit:]]+[.][[:digit:]]+[.][[:digit:]]+'
   local    x
   local    tmp
   local    renamed

   pushd "$d" >/dev/null 2>&1
   ${AUTORECONF} -vi
   popd >/dev/null 2>&1

   USER_VPATH="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.u.XXXXXXXXXX"`"
   pushd "${USER_VPATH}" >/dev/null 2>&1

   $d/configure
   ${MAKE} -j4
   ${MAKE} -j4 DESTDIR="${USER_VPATH}/DESTDIR" distcheck

   popd >/dev/null 2>&1

   for x in `${FIND} "${USER_VPATH}" -maxdepth 1 -type f` ; do
      tmp="$x"
      if [[ ${tmp} =~ ${regex} ]]; then
         renamed="${x##*/}"
         renamed="${renamed/.tar.gz/.BSD-License${TAG}-${GIT_COMMIT_HASH}.tar.gz}"
         ${MV} "$x" "./${renamed}"
         break
      fi
   done
}

create_samples_dist() {
   local -r d="${PWD}/aalsamples"

   SAMPLES_TMPDIR="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.s.XXXXXXXXXX"`"

#   ${MKDIR} -p "${SAMPLES_TMPDIR}/aalsamples-${SAMPLES_VERSION}"
   ${MKDIR} -p "${SAMPLES_TMPDIR}/Samples"

   for x in `${FIND} "$d" -maxdepth 1 -type d` ; do
      [ "x${x##*/}" = "x.git" ] && continue
      [ "x$x" = "x$d" ] && continue
      ${CP} -R "$x" "${SAMPLES_TMPDIR}/Samples"
   done

   for x in `${FIND} "$d" -maxdepth 1 -type f` ; do
      [ "x${x##*/}" = "x.git" ] && continue
      ${CP} "$x" "${SAMPLES_TMPDIR}/Samples"
   done

   ${FIND} "${SAMPLES_TMPDIR}/Samples" -type f \( -iname "*.vcxproj" -o -iname "*.vcxproj.filters" \) -delete

   ## for 5.0.0 strip out irrelevant samples that will not build
   ${RM} -rf "${SAMPLES_TMPDIR}/Samples/Hello_CCI_NLB"
   ${RM} -rf "${SAMPLES_TMPDIR}/Samples/Hello_SPL_LB"
   ${RM} -rf "${SAMPLES_TMPDIR}/Samples/Sudoku_SPL"
   ${RM} -rf "${SAMPLES_TMPDIR}/Samples/LinkedList_SPL"
   ${RM} -rf "${SAMPLES_TMPDIR}/Samples/doc"
   ${RM} -rf "${SAMPLES_TMPDIR}/Samples/Scripts"
   ${RM} -rf "${SAMPLES_TMPDIR}/Samples/Hello_ALI_HSSI"
   
   pushd "${SAMPLES_TMPDIR}" >/dev/null 2>&1
   ${TAR} zcf "aalsamples-${SAMPLES_VERSION}.BSD-License${TAG}-${GIT_COMMIT_HASH}.tar.gz" "Samples"
   popd >/dev/null 2>&1

   ${MV} "${SAMPLES_TMPDIR}/aalsamples-${SAMPLES_VERSION}.BSD-License${TAG}-${GIT_COMMIT_HASH}.tar.gz" .
}

create_final_dist() {
   FINAL_TMPDIR="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.f.XXXXXXXXXX"`"

   ${MKDIR} -p "${FINAL_TMPDIR}/aalsdk-${SAMPLES_VERSION}"

   for x in "aalsamples-${SAMPLES_VERSION}.BSD-License${TAG}-${GIT_COMMIT_HASH}.tar.gz" \
            "aalsdk-${SAMPLES_VERSION}.BSD-License${TAG}-${GIT_COMMIT_HASH}.tar.gz" \
            "aalkernel-${SAMPLES_VERSION}.Dual-BSD-GPLv2-License${TAG}-${GIT_COMMIT_HASH}.tar.gz" \
            "./Readme.MultiPackage.txt"
   do
      ${CP} "$x" "${FINAL_TMPDIR}/aalsdk-${SAMPLES_VERSION}"
   done

   pushd "${FINAL_TMPDIR}" >/dev/null 2>&1
   ${TAR} zcf "aalsdk-${SAMPLES_VERSION}${TAG}-${GIT_COMMIT_HASH}.tar.gz" "aalsdk-${SAMPLES_VERSION}"
   popd >/dev/null 2>&1

   ${MV} "${FINAL_TMPDIR}/aalsdk-${SAMPLES_VERSION}${TAG}-${GIT_COMMIT_HASH}.tar.gz" .
}


main() {
   local -r d="${PWD}"
   local -r gitdir="$d/.git"

   # Are we in the right dir?
   [ -d "$d/aaluser" ] || die "aaluser not found."
   [ -d "$d/aalkernel" ] || die "aalkernel not found."
   [ -d "$d/common_hdrs" ] || die "common_hdrs not found."

   for x in "$d/aaluser" \
            "$d/aalkernel"
   do

      # Make sure the symlinks to common_hdrs exist.
      if [ -e "$x/include/aalsdk/kernel" ]; then
         if ! [ -L "$x/include/aalsdk/kernel" ]; then
            die "$x/include/aalsdk/kernel exists, but is not a symbolic link."
         fi
      else
         pushd "$x/include/aalsdk" >/dev/null 2>&1
         ${LN} -s ../../../common_hdrs kernel
         popd >/dev/null 2>&1
      fi

   done

   GIT_COMMIT_HASH="`${GIT} --git-dir=${gitdir} log -1 --format='%h'`"

   create_kernel_dist
   create_user_dist
   create_samples_dist
   #create_final_dist
}
main

exit 0
