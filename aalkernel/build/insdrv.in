#!/bin/bash
################################################################################
## Part of the Intel(R) QuickAssist Technology Accelerator Abstraction Layer
##
## This  file  is  provided  under  a  dual BSD/GPLv2  license.  When using or
##         redistributing this file, you may do so under either license.
##
##                            GPL LICENSE SUMMARY
##
##  Copyright(c) 2007-2015, Intel Corporation.
##
##  This program  is  free software;  you  can redistribute it  and/or  modify
##  it  under  the  terms of  version 2 of  the GNU General Public License  as
##  published by the Free Software Foundation.
##
##  This  program  is distributed  in the  hope that it  will  be useful,  but
##  WITHOUT   ANY   WARRANTY;   without   even  the   implied   warranty    of
##  MERCHANTABILITY  or  FITNESS  FOR  A  PARTICULAR  PURPOSE.  See  the   GNU
##  General Public License for more details.
##
##  The  full  GNU  General Public License is  included in  this  distribution
##  in the file called README.GPLV2-LICENSE.TXT.
##
##  Contact Information:
##  Henry Mitchel, henry.mitchel at intel.com
##  77 Reed Rd., Hudson, MA  01749
##
##                                BSD LICENSE
##
##  Copyright(c) 2007-2015, Intel Corporation.
##
##  Redistribution and  use  in source  and  binary  forms,  with  or  without
##  modification,  are   permitted  provided  that  the  following  conditions
##  are met:
##
##    * Redistributions  of  source  code  must  retain  the  above  copyright
##      notice, this list of conditions and the following disclaimer.
##    * Redistributions in  binary form  must  reproduce  the  above copyright
##      notice,  this  list of  conditions  and  the  following disclaimer  in
##      the   documentation   and/or   other   materials   provided  with  the
##      distribution.
##    * Neither   the  name   of  Intel  Corporation  nor  the  names  of  its
##      contributors  may  be  used  to  endorse  or promote  products derived
##      from this software without specific prior written permission.
##
##  THIS  SOFTWARE  IS  PROVIDED  BY  THE  COPYRIGHT HOLDERS  AND CONTRIBUTORS
##  "AS IS"  AND  ANY  EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING,  BUT  NOT
##  LIMITED  TO, THE  IMPLIED WARRANTIES OF  MERCHANTABILITY  AND FITNESS  FOR
##  A  PARTICULAR  PURPOSE  ARE  DISCLAIMED.  IN NO EVENT  SHALL THE COPYRIGHT
##  OWNER OR CONTRIBUTORS BE LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,
##  SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL   DAMAGES  (INCLUDING,   BUT   NOT
##  LIMITED  TO,  PROCUREMENT  OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF USE,
##  DATA,  OR PROFITS;  OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED  AND ON ANY
##  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT LIABILITY,  OR TORT
##  (INCLUDING  NEGLIGENCE  OR OTHERWISE) ARISING  IN ANY WAY  OUT  OF THE USE
##  OF  THIS  SOFTWARE, EVEN IF ADVISED  OF  THE  POSSIBILITY  OF SUCH DAMAGE.
################################################################################

shopt -o -s nounset

declare -r SCRIPT="${0##*/}"

declare -r BUILD_DIR='@abs_top_builddir@'

die() {
   local -r msg="$1"
   printf "%s\n" "${msg}"
   exit 1
}

declare -r CHMOD="`which chmod`" 2>/dev/null
[ "x${CHMOD}" = "x" ] && die "no chmod?"
declare -r GREP="`which grep`" 2>/dev/null
[ "x${GREP}" = "x" ] && die "no grep?"
declare -r INSMOD='/sbin/insmod'
declare -r LS="`which ls`" 2>/dev/null
[ "x${LS}" = "x" ] && die "no ls?"
declare -r LSMOD="`which lsmod`" 2>/dev/null
[ "x${LSMOD}" = "x" ] && die "no lsmod?"
declare -r SLEEP="`which sleep`" 2>/dev/null
[ "x${SLEEP}" = "x" ] && die "no sleep?"

# Names for sets of drivers which can be loaded by this script.
declare -ra DRIVER_SETS=(\
'base' \
'spl' \
'spl-pci' \
'spl-nhm' \
'spl-jkt' \
'spl-test Base address' \
)

declare -r DEV_PERMS='a+rw'

print_help() {
   cat << END
Usage: ${SCRIPT} set1 [set2 ...]
          where setX is one of the following: ${DRIVER_SETS[@]}

END
}

if [ $# -lt 1 ]; then
   print_help
   die "Run me again, and give a driver set name."
fi

declare mod
declare mod_path

   case $1 in

      base)
         mod="@AALBUS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalbus/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_server/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMC_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_client/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALUIDRV_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aal_uidriver/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"
      ;; # base

      spl2|spl2-pci|spl2-nhm|spl2-jkt)
         die "$1 is deprecated. Please choose from the following: ${DRIVER_SETS[*]}"
      ;; # spl2

      spl)
         mod="@AALBUS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalbus/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_server/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMC_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_client/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALUIDRV_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aal_uidriver/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@SPL2PIP_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/spl2_pip_dksm/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"
      ;; # spl

      spl-pci|spl_pci)
         mod="@AALBUS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalbus/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_server/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMC_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_client/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALUIDRV_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aal_uidriver/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@SPL2PIP_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/spl2_pip_dksm/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" nopcie=0 ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"
      ;; # spl-pci (nopcie=0)

      spl-nhm|spl_nhm)
         mod="@AALBUS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalbus/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_server/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMC_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_client/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALUIDRV_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aal_uidriver/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@SPL2PIP_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/spl2_pip_dksm/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" nopcie=2 ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"
      ;; # spl-nhm (nopcie=2)

      spl-jkt|spl_jkt)
         mod="@AALBUS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalbus/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_server/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMC_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_client/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALUIDRV_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aal_uidriver/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@SPL2PIP_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/spl2_pip_dksm/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" nopcie=3 ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"
      ;; # spl-jkt (nopcie=3)
		
		# spl-test 
      spl-test|spl_test)
        
         if [ $# -lt 2 ]; then
   	 	  	die "Error output --- spl-test expects second argument."
	  	 fi
	  	 
         mod="@AALBUS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalbus/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMS_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_server/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALRMC_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aalresourcemgr_client/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@AALUIDRV_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/aal_uidriver/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"

         mod="@SPL2PIP_DRV_NAME@.ko"
         mod_path="${BUILD_DIR}/spl2_pip_dksm/kbuild"
         printf "insmod %-15s " "${mod}"
         if ${LSMOD} | ${GREP} -q "^${mod%.*}" ; then
            printf "[ALREADY]\n"
         elif ! ${INSMOD} "${mod_path}/${mod}" nopcie=$2 ; then
            die "[FAIL]"
         fi
         printf "[ OK ]\n"
      ;; # spl-test (nopcie=$2)
      *)
         print_help
         die "$1 is not a valid driver set."
      ;;

   esac

${SLEEP} 3

${CHMOD} "${DEV_PERMS}" '/dev/aalrms'    || die "dev file perms for aalrms"
${CHMOD} "${DEV_PERMS}" '/dev/aalresmgr' || die "dev file perms for aalresmgr"
${CHMOD} "${DEV_PERMS}" '/dev/aalui'     || die "dev file perms for aalui"

${LS} -l '/dev/aalrms' '/dev/aalresmgr' '/dev/aalui'

exit 0

