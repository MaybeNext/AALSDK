#!/bin/bash
# INTEL CONFIDENTIAL - For Intel Internal Use Only

shopt -o -s nounset
set -e

declare -r SCRIPT_NAME='prep-build'

declare -r CONFIGUREOPTS="${CONFIGUREOPTS:---disable-dependency-tracking}"
declare -r MAKEOPTS="${MAKEOPTS:-}"

declare    WANT_DISTCC=false
declare    MAINTAINER_CHECK=false
declare    DEEP_CLEAN=false

die() {
   if [ -t 1 ]; then
      printf "\x1b[1;31mdie:\x1b[0m $*\n"
   else
      printf "die: $*\n"
   fi
   exit 13
}

declare -r AUTORECONF="`which autoreconf`" 2>/dev/null
[ "x${AUTORECONF}" != x ] || die "no autoreconf?"
declare -r DISTCC="`which distcc`" 2>/dev/null
declare -r FIND="`which find`" 2>/dev/null
[ "x${FIND}" != x ] || die "no find?"
declare -r LN="`which ln`" 2>/dev/null
[ "x${LN}" != x ] || die "no ln?"
declare -r MAKE="`which make`" 2>/dev/null
[ "x${MAKE}" != x ] || die "no make?"
declare -r MKTEMP="`which mktemp`" 2>/dev/null
[ "x${MKTEMP}" != x ] || die "no mktemp?"
declare -r RM="`which rm`" 2>/dev/null
[ "x${RM}" != x ] || die "no rm?"
declare -r SORT="`which sort`" 2>/dev/null
[ "x${SORT}" != x ] || die "no sort?"

declare TMPDIR=''
on_exit() {
   set +e
   if [ "x${TMPDIR}" != x ]; then
      if [ -d "${TMPDIR}" ]; then
         popd >/dev/null 2>&1
         ${RM} -rf "${TMPDIR}"
      fi
   fi
}
trap 'on_exit' EXIT

on_sigint() {
   trap - SIGINT
   exit 99
}
trap 'on_sigint' SIGINT

while [ $# -gt 0 ]; do
   case "$1" in
      --mc|--maintainer-check)
         MAINTAINER_CHECK=true
      ;;
      --distcc)
         WANT_DISTCC=true
      ;;
      --deep-clean)
         DEEP_CLEAN=true
      ;;
   esac
   shift
done

################################################################################

do_maintainer_check() {
   local -r d="${PWD}"

   TMPDIR="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.k.XXXXXXXXXX"`"

   pushd "${TMPDIR}" >/dev/null 2>&1

   $d/aalkernel/configure ${CONFIGUREOPTS}

   ${MAKE} ${MAKEOPTS} maintainer-check

   popd >/dev/null 2>&1

   ${RM} -rf "${TMPDIR}"


   TMPDIR="`${MKTEMP} -d --tmpdir "${SCRIPT_NAME}.u.XXXXXXXXXX"`"

   pushd "${TMPDIR}" >/dev/null 2>&1

   $d/aaluser/configure ${CONFIGUREOPTS}

   if ${WANT_DISTCC} && [ "x${DISTCC}" != x ] && [ -d "${HOME}/distcc" ]; then
      WITH_DISTCC=y ${MAKE} ${MAKEOPTS} maintainer-check
   else
      ${MAKE} ${MAKEOPTS} maintainer-check
   fi

   popd >/dev/null 2>&1

   ${RM} -rf "${TMPDIR}"

   TMPDIR=''
}

################################################################################

do_deep_clean() {
   local -r d="${PWD}"

   pushd "$d/aalkernel" >/dev/null 2>&1
   ./configure ${CONFIGUREOPTS}
   ${MAKE} ${MAKEOPTS} distclean
   popd >/dev/null 2>&1

   pushd "$d/aaluser" >/dev/null 2>&1
   ./configure ${CONFIGUREOPTS}
   ${MAKE} ${MAKEOPTS} distclean
   popd >/dev/null 2>&1

   pushd "$d/aalsamples" >/dev/null 2>&1
   ${MAKE} ${MAKEOPTS} clean
   popd >/dev/null 2>&1

   local     x f D
   local -ra dirs_to_remove=(\
autom4te.cache \
gtest-1.6.0 \
gtest-1.7.0 \
mybuild \
myinst \
__pycache__\
)

   for x in ${dirs_to_remove[@]} ; do
      ${FIND} "$d" -type d -name "$x" | ${SORT} -r | {
         while read D ; do
            ${RM} -rf "$D"
         done
      }
   done

   local -ra files_to_remove=(\
Makefile.in \
aclocal.m4 \
ar-lib \
autom4te.cache \
compile \
config.guess \
config.h.in \
config.h.in~ \
config.sub \
configure \
depcomp \
install-sh \
libtool.m4 \
ltmain.sh \
ltoptions.m4 \
ltsugar.m4 \
ltversion.m4 \
lt~obsolete.m4 \
missing \
test-driver \
ylwrap\
)

   for x in ${files_to_remove[@]} ; do
      ${FIND} "$d" -type f -name "$x" | {
         while read f ; do
            ${RM} -f "$f"
         done
      }
   done
}

################################################################################

main() {
   local -r d="${PWD}"

   # Are we in the right dir?
   [ -d "$d/aaluser" ] || die "aaluser not found."
   [ -d "$d/aalkernel" ] || die "aalkernel not found."
   [ -d "$d/common_hdrs" ] || die "common_hdrs not found."

   for x in "$d/aaluser" \
            "$d/aalkernel"
   do

      # Make sure the symlinks to common_hdrs exist.
      if [ -e "$x/include/aalsdk/kernel" ]; then
         if ! [ -L "$x/include/aalsdk/kernel" ]; then
            die "$x/include/aalsdk/kernel exists, but is not a symbolic link."
         fi
      else
         pushd "$x/include/aalsdk" >/dev/null 2>&1
         ${LN} -s ../../../common_hdrs kernel
         popd >/dev/null 2>&1
      fi

      # If we don't find a configure script, run autoreconf.
      if ! [ -e "$x/configure" ]; then
         pushd "$x" >/dev/null 2>&1
         ${AUTORECONF} -vi
         popd >/dev/null 2>&1
      fi

   done

   if ${MAINTAINER_CHECK} ; then
      do_maintainer_check
   fi

   if ${DEEP_CLEAN} ; then
      do_deep_clean
   fi
}
main

exit 0
