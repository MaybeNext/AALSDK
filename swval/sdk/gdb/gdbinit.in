# @configure_input@              -*- shell-script -*-
# gdbinit for @PACKAGE@.
# INTEL CONFIDENTIAL - For Intel Internal Use Only

# gdbtui
#  * increase the height of the command/output window: winheight <win> +20  # <win> = { cmd, src }
#  * switch input focus to opposite window: Ctrl-x o
#  * open the registers window: layout regs

define enter_nonstop_mode
   # Non-stop Mode: when a thread stops to report a debugging event, only that
   # thread is stopped; GDB does not stop other threads as well, in contrast to the
   # all-stop mode behavior. Additionally, execution commands such as continue and
   # step apply be default only to the current thread in non-stop mode, rather than
   # all threads as in all-stop mode.
   # eclipse: use Debugger -> Main -> Non-stop mode (Note: Requires non-stop GDB)
   set target-async 1
   set pagination off
   set non-stop on
end

define enter_allstop_mode
   set non-stop off
   set pagination on
   set target-async 0
end

define breakpoint_mutex_lock
   # prevents thread contention on the output file descriptor
   set scheduler-locking on
end

define breakpoint_mutex_unlock
   # allows current thread to single-step without allowing others to run
   set scheduler-locking step
end

define gdb_output_off
   set logging redirect on
   set logging file /dev/null
   set logging on
end

define gdb_output_on
   set logging off
end


# python pretty printers
#  * view the currently-loaded printers: info pretty-printer
set $register_local_pretty_printers = 1
if $register_local_pretty_printers != 0
# Search for and enable Python pretty printers.
# Keep the indentation below - Python requires it.
python
import os
import sys

def find_dir(p, d):
   for root, dirs, files in os.walk(p):
      for adir in dirs:
         if adir == d:
            return p + '/' + adir
      for adir in dirs:
         y = find_dir(p + '/' + adir, d)
         if y is not None:
            return y
   return None

res = None
for x in ['@abs_top_srcdir@/gdb/pretty-printers', '/home/' + os.getlogin() + '/bin']:
   if os.path.exists(x):
      res = find_dir(x, 'libstdc++-v3')
      if res is not None and os.path.exists(res + '/python/libstdcxx/v6'):
         res = res + '/python'
         sys.path.insert(0, res)
         res = res + '/libstdcxx/v6'
         sys.path.insert(1, res)
         from libstdcxx.v6.printers import register_libstdcxx_printers
         break

if res is None:
   for x in ['/usr/local/bin/libstdc++-v3']:
      if os.path.exists(x + '/python/libstdcxx/v6'):
         x = x + '/python'
         sys.path.insert(0, x)
         x = x + '/libstdcxx/v6'
         sys.path.insert(1, x)
         from libstdcxx.v6.printers import register_libstdcxx_printers
         break
end
end

set $print_thread_events = 0
define gdb_setup
   # General
   set width 0
   set height 0
   set output-radix 0xa
   set print pretty on

   # C++
   set print demangle on
   set print asm-demangle on
   # auto gnu hp lucid arm
   set demangle-style gnu-v3
   set print object on
   set print static-members on
   set print vtbl on
   catch catch

   # Shared Libs
   set stop-on-solib-events 0
   set breakpoint pending on

   # Threading
   if $print_thread_events != 0
      set print thread-events on
   else
      set print thread-events off
   end
   set auto-load safe-path /
   set libthread-db-search-path $pdir:$sdir
   enter_allstop_mode
end
gdb_setup

################################################################################
# Breakpoints ##################################################################
################################################################################

#break dlopen
#break pthread_create
#break __cxa_pure_virtual

break main
commands
silent
   breakpoint_mutex_lock
      thread name main
   breakpoint_mutex_unlock
#continue
end

