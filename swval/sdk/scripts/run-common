# INTEL CONFIDENTIAL - For Intel Internal Use Only

die() {
   printf "die: %s\n" ${1+"$@"}
   exit 13
}

declare -r AUTORECONF="`which autoreconf`" 2>/dev/null
[ "x${AUTORECONF}" = x ] && die "no autoreconf?"
declare -r CAT="`which cat`" 2>/dev/null
[ "x${CAT}" = x ] && die "no cat?"
declare -r DISTCC="`which distcc`" 2>/dev/null
declare -r GIT="`which git`" 2>/dev/null
[ "x${GIT}" = x ] && die "no git?"
declare -r MAKE="`which make`" 2>/dev/null
[ "x${MAKE}" = x ] && die "no make?"
declare -r MKDIR="`which mkdir`" 2>/dev/null
[ "x${MKDIR}" = x ] && die "no mkdir?"
declare -r MKTEMP="`which mktemp`" 2>/dev/null
[ "x${MKTEMP}" = x ] && die "no mktemp?"
declare -r LN="`which ln`" 2>/dev/null
[ "x${LN}" = x ] && die "no ln?"
declare -r RM="`which rm`" 2>/dev/null
[ "x${RM}" = x ] && die "no rm?"

declare VPATH=''
declare LOGFILE=''
declare KILLED=false

declare GIT_COMMIT_HASH=''

on_exit() {
   ${KILLED} && printf "=[\n"
}
trap 'on_exit' EXIT

on_sigint() {
   trap - SIGINT
   KILLED=true
   exit 99
}
trap 'on_sigint' SIGINT

PASS() {
   [ -t 1 ] && printf "\x1b[1;32m"
   ${CAT} <<END
PASS   ___         ___           ___           ___
      /\\  \\       /\\  \\         /\\__\\         /\\__\\
     /::\\  \\     /::\\  \\       /:/ _/_       /:/ _/
    /:/\\:\\__\\   /:/\\:\\  \\     /:/ /\\  \\     /:/ /\\  \\
   /:/ /:/  /  /:/ /::\\  \\   /:/ /::\\  \\   /:/ /::\\  \\
  /:/_/:/  /  /:/_/:/\\:\\__\\ /:/_/:/\\:\\__\\ /:/_/:/\\:\\__\\
  \\:\\/:/  /   \\:\\/:/  \\/__/ \\:\\/:/ /:/  / \\:\\/:/ /:/  /
   \\::/__/     \\::/__/       \\::/ /:/  /   \\::/ /:/  /
    \\:\\  \\      \\:\\  \\        \\/_/:/  /     \\/_/:/  /
     \\:\\__\\      \\:\\__\\         /:/  /        /:/  /
      \\/__/       \\/__/         \\/__/         \\/__/
END
   [ -t 1 ] && printf "\x1b[0m"
}

FAIL() {
   [ -t 1 ] && printf "\x1b[1;31m"
   ${CAT} <<END
FAIL   ___           ___                       ___
      /\\  \\         /\\  \\          ___        /\\__\\
     /::\\  \\       /::\\  \\        /\\  \\      /:/  /
    /:/\\:\\  \\     /:/\\:\\  \\       \\:\\  \\    /:/  /
   /::\\~\\:\\  \\   /::\\~\\:\\  \\      /::\\__\\  /:/  /
  /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:\\__\\  __/:/\\/__/ /:/__/
  \\/__\\:\\ \\/__/ \\/__\\:\\/:/  / /\\/:/  /    \\:\\  \\
       \\:\\__\\        \\::/  /  \\::/__/      \\:\\  \\
        \\/__/        /:/  /    \\:\\__\\       \\:\\  \\
                    /:/  /      \\/__/        \\:\\__\\
                    \\/__/                     \\/__/
END
   [ -t 1 ] && printf "\x1b[0m"
}

# $1 [optional] bool : whether or not the user wants distcc.
setup() {
   local wantdistcc=false
   if [ $# -gt 0 ]; then
      wantdistcc=$1
   fi

   # This script is located in swval/sdk/scripts
   local -r srcdir="`cd ${PWD}/.. && pwd`"
   local -r reporoot="`cd ${srcdir}/../.. && pwd`"
   local -r gitdir="${reporoot}/.git"

   local    do_config=false

   # Make sure we're being run from the right place.
   [ -e "${gitdir}" ] || die "${SCRIPT_NAME} must be run from the dir where it exists."

   GIT_COMMIT_HASH="`${GIT} --git-dir=${gitdir} log -1 --format='%H%d'`"

   VPATH="${PWD}/run.${GIT_COMMIT_HASH:0:7}"
   if ! [ -d "${VPATH}" ]; then
      ${MKDIR} -p "${VPATH}"
   fi

   LOGFILE="${VPATH}/tests/testsuite.log"

   if ! [ -f "${VPATH}/Makefile" ]; then
      do_config=true
   fi

   if ! [ -f "${VPATH}/tests/bat"                  ] || \
      ! [ -f "${VPATH}/tests/nightly"              ] || \
      ! [ -f "${VPATH}/tests/weekly"               ] || \
      ! [ -f "${VPATH}/tests/OSAL_TestSem"         ] || \
      ! [ -f "${VPATH}/tests/OSAL_TestThreadGroup" ]; then
      do_config=true
   fi

   if ${do_config} ; then
      # Make sure that the symlinks to common_hdrs exist.
      for x in "${reporoot}/aaluser/include/aalsdk" \
               "${reporoot}/aalkernel/include/aalsdk"
      do
         if ! [ -L "$x/kernel" ]; then
            pushd "$x" >/dev/null 2>&1
            ${LN} -s "../../../common_hdrs" kernel
            popd >/dev/null 2>&1
         fi
      done

      if ! [ -f "${srcdir}/configure" ]; then
         pushd "${srcdir}" >/dev/null 2>&1
         ${AUTORECONF} -vi
         popd >/dev/null 2>&1
      fi

      pushd "${VPATH}" >/dev/null 2>&1

      ${srcdir}/configure

      popd >/dev/null 2>&1
   fi

   pushd "${VPATH}" >/dev/null 2>&1

   if ${wantdistcc} && [ "x${DISTCC}" != x ] && [ -d "${HOME}/distcc" ]; then
      PATH="${HOME}/distcc:${PATH}" ${MAKE} -j 250 ${MAKEOPTS:-} all
      PATH="${HOME}/distcc:${PATH}" ${MAKE} -j 250 ${MAKEOPTS:-} check
   else
      ${MAKE} ${MAKEOPTS:-} all
      ${MAKE} ${MAKEOPTS:-} check
   fi

   popd >/dev/null 2>&1
}

run_standalone() {
   local -i res=1
   local    cmd

   cmd="${VPATH}/tests/OSAL_TestSem ${1+"$@"}"

   printf "%s\n" "${cmd}"

   ${cmd}
   res=$?

   if [ ${res} -ne 0 ]; then
      printf "%s\n" "${cmd}"
      FAIL
      return ${res}
   fi

   cmd="${VPATH}/tests/OSAL_TestThreadGroup ${1+"$@"}"

   printf "%s\n" "${cmd}"

   ${cmd}
   res=$?

   if [ 0 -ne ${res} ]; then
      printf "%s\n" "${cmd}"
      FAIL
   fi

   return ${res}
}

run_bat() {
   local cmd

   cmd="${VPATH}/tests/bat ${1+"$@"}"

   printf "\n%s\n" "${GIT_COMMIT_HASH}"
   printf "%s\n\n" "${cmd}"

   printf "\n%s\n" "${GIT_COMMIT_HASH}" >>"${LOGFILE}"
   printf "%s\n\n" "${cmd}" >>"${LOGFILE}"

   exec ${cmd} >>"${LOGFILE}"
   return $?
}

run_nightly() {
   local cmd

   cmd="${VPATH}/tests/nightly ${1+"$@"}"

   printf "\n%s\n" "${GIT_COMMIT_HASH}"
   printf "%s\n\n" "${cmd}"

   printf "\n%s\n" "${GIT_COMMIT_HASH}" >>"${LOGFILE}"
   printf "%s\n\n" "${cmd}" >>"${LOGFILE}"

   exec ${cmd} >>"${LOGFILE}"
   return $?
}

run_weekly() {
   local cmd

   cmd="${VPATH}/tests/weekly ${1+"$@"}"

   printf "\n%s\n" "${GIT_COMMIT_HASH}"
   printf "%s\n\n" "${cmd}"

   printf "\n%s\n" "${GIT_COMMIT_HASH}" >>"${LOGFILE}"
   printf "%s\n\n" "${cmd}" >>"${LOGFILE}"

   exec ${cmd} >>"${LOGFILE}"
   return $?
}

run_everything() {
   local -i res
   local -i ret=0
   local    cmd

   run_standalone

   cmd="${VPATH}/tests/bat ${1+"$@"}"

   printf "\n%s\n" "${GIT_COMMIT_HASH}"
   printf "%s\n\n" "${cmd}"

   ${cmd}
   res=$?
   [ ${res} -ne 0 ] && ret=${res}

   cmd="${VPATH}/tests/nightly ${1+"$@"}"

   printf "\n%s\n" "${GIT_COMMIT_HASH}"
   printf "%s\n\n" "${cmd}"

   ${cmd}
   res=$?
   [ ${res} -ne 0 ] && ret=${res}

   cmd="${VPATH}/tests/weekly ${1+"$@"}"

   printf "\n%s\n" "${GIT_COMMIT_HASH}"
   printf "%s\n\n" "${cmd}"

   ${cmd}
   res=$?
   [ ${res} -ne 0 ] && ret=${res}

   if [ 0 -eq ${ret} ]; then
      PASS
   else
      FAIL
   fi

   return ${ret}
}

