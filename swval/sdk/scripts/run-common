# INTEL CONFIDENTIAL - For Intel Internal Use Only

die() {
   printf "die: %s\n" ${1+"$@"}
   exit 13
}

declare -r AUTORECONF="`which autoreconf`" 2>/dev/null
[ "x${AUTORECONF}" = x ] && die "no autoreconf?"
declare -r GIT="`which git`" 2>/dev/null
[ "x${GIT}" = x ] && die "no git?"
declare -r MAKE="`which make`" 2>/dev/null
[ "x${MAKE}" = x ] && die "no make?"
declare -r MKDIR="`which mkdir`" 2>/dev/null
[ "x${MKDIR}" = x ] && die "no mkdir?"
declare -r MKTEMP="`which mktemp`" 2>/dev/null
[ "x${MKTEMP}" = x ] && die "no mktemp?"
declare -r LN="`which ln`" 2>/dev/null
[ "x${LN}" = x ] && die "no ln?"
declare -r RM="`which rm`" 2>/dev/null
[ "x${RM}" = x ] && die "no rm?"
declare -r TIME="`which time`" 2>/dev/null

declare VPATH=''
declare KILLED=false

on_exit() {
   ${KILLED} && printf "=[\n"
}
trap 'on_exit' EXIT

on_sigint() {
   trap - SIGINT
   KILLED=true
   exit 99
}
trap 'on_sigint' SIGINT

declare    TESTSUITE=''
declare -r USE_TESTSUITE=false
declare    GTEST_OPT=''
${USE_TESTSUITE} && GTEST_OPT='--gtest-opt='

setup() {
   # This script is located in swval/sdk/scripts
   local -r srcdir="`cd ${PWD}/.. && pwd`"
   local -r reporoot="`cd ${srcdir}/../.. && pwd`"
   local -r gitdir="${reporoot}/.git"

   local    do_config=false

   TESTSUITE="${srcdir}/tests/testsuite"

   # Make sure we're being run from the right place.
   [ -e "${gitdir}" ] || die "${SCRIPT_NAME} must be run from the dir where it exists."

   local -r git_commit_hash="`${GIT} --git-dir=${gitdir} log -1 --format='%H%d'`"

   VPATH="${PWD}/run.${git_commit_hash:0:7}"
   if ! [ -d "${VPATH}" ]; then
      ${MKDIR} -p "${VPATH}"
   fi

   if ! [ -f "${VPATH}/Makefile" ]; then
      do_config=true
   fi

   if ${USE_TESTSUITE} ; then
      if ! [ -f "${TESTSUITE}" ]; then
         do_config=true
      fi
   else
      if ! [ -f "${VPATH}/tests/bat"                  ] || \
         ! [ -f "${VPATH}/tests/nightly"              ] || \
         ! [ -f "${VPATH}/tests/weekly"               ] || \
         ! [ -f "${VPATH}/tests/OSAL_TestSem"         ] || \
         ! [ -f "${VPATH}/tests/OSAL_TestThreadGroup" ]; then
         do_config=true
      fi
   fi

   if ${do_config} ; then
      # Make sure that the symlinks to common_hdrs exist.
      for x in "${reporoot}/aaluser/include/aalsdk" \
               "${reporoot}/aalkernel/include/aalsdk"
      do
         if ! [ -L "$x/kernel" ]; then
            pushd "$x" >/dev/null 2>&1
            ${LN} -s "../../../common_hdrs" kernel
            popd >/dev/null 2>&1
         fi
      done

      if ! [ -f "${srcdir}/configure" ]; then
         pushd "${srcdir}" >/dev/null 2>&1
         ${AUTORECONF} -vi
         popd >/dev/null 2>&1
      fi

      pushd "${VPATH}" >/dev/null 2>&1

      ${srcdir}/configure

      popd >/dev/null 2>&1
   fi

   pushd "${VPATH}" >/dev/null 2>&1

   ${MAKE}
   ${MAKE} check

   popd >/dev/null 2>&1

   printf "\n"
   printf "%s\n" "${git_commit_hash}"
}
setup

run_standalone() {
   local -i res=1
   local    cmd

   if ${USE_TESTSUITE}; then
      cmd="${TESTSUITE} -v -C ${VPATH}/tests --standalone ${1+"$@"}"

      printf "%s\n" "${cmd}"

      ${TIME} ${cmd}
      res=$?

      [ 0 -eq ${res} ] || printf "%s\n" "${cmd}"
   else
      cmd="${VPATH}/tests/OSAL_TestSem ${1+"$@"}"

      printf "%s\n" "${cmd}"

      ${TIME} ${cmd}
      res=$?

      if [ ${res} -ne 0 ]; then
         printf "%s\n" "${cmd}"
         return ${res}
      fi

      cmd="${VPATH}/tests/OSAL_TestThreadGroup ${1+"$@"}"

      printf "%s\n" "${cmd}"

      ${TIME} ${cmd}
      res=$?

      [ 0 -eq ${res} ] || printf "%s\n" "${cmd}"
   fi

   return ${res}
}

run_bat() {
   local -i res=1
   local    auto_color=''
   local    cmd

   [ -t 1 ] && auto_color="${GTEST_OPT}--gtest_color=yes"

   if ${USE_TESTSUITE}; then
      cmd="${TESTSUITE} -v -C ${VPATH}/tests --bat ${auto_color} ${1+"$@"}"
   else
      cmd="${VPATH}/tests/bat ${auto_color} ${1+"$@"}"
   fi

   printf "%s\n" "${cmd}"

   ${TIME} ${cmd}
   res=$?

   [ 0 -eq ${res} ] || printf "%s\n" "${cmd}"

   return ${res}
}

run_nightly() {
   local -i res=1
   local    auto_color=''
   local    cmd

   [ -t 1 ] && auto_color="${GTEST_OPT}--gtest_color=yes"

   if ${USE_TESTSUITE}; then
      cmd="${TESTSUITE} -v -C ${VPATH}/tests --nightly ${auto_color} ${1+"$@"}"
   else
      cmd="${VPATH}/tests/nightly ${auto_color} ${1+"$@"}"
   fi

   printf "%s\n" "${cmd}"

   ${TIME} ${cmd}
   res=$?

   [ 0 -eq ${res} ] || printf "%s\n" "${cmd}"

   return ${res}
}

run_weekly() {
   local -i res=1
   local    auto_color=''
   local    cmd

   [ -t 1 ] && auto_color="${GTEST_OPT}--gtest_color=yes"

   if ${USE_TESTSUITE}; then
      cmd="${TESTSUITE} -v -C ${VPATH}/tests --weekly ${auto_color} ${1+"$@"}"
   else
      cmd="${VPATH}/tests/weekly ${auto_color} ${1+"$@"}"
   fi

   printf "%s\n" "${cmd}"

   ${TIME} ${cmd}
   res=$?

   [ 0 -eq ${res} ] || printf "%s\n" "${cmd}"

   return ${res}
}

run_everything() {
   local -i res=0
   run_standalone || let $(( ++res ))
   run_bat        || let $(( ++res ))
   run_nightly    || let $(( ++res ))
   run_weekly     || let $(( ++res ))
   return ${res}
}

