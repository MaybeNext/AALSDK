# INTEL CONFIDENTIAL - For Intel Internal Use Only

die() {
   printf "die: %s\n" ${1+"$@"}
   exit 13
}

declare -r AUTORECONF="`which autoreconf`" 2>/dev/null
[ "x${AUTORECONF}" = x ] && die "no autoreconf?"
declare -r GIT="`which git`" 2>/dev/null
[ "x${GIT}" = x ] && die "no git?"
declare -r MAKE="`which make`" 2>/dev/null
[ "x${MAKE}" = x ] && die "no make?"
declare -r MKDIR="`which mkdir`" 2>/dev/null
[ "x${MKDIR}" = x ] && die "no mkdir?"
declare -r LN="`which ln`" 2>/dev/null
[ "x${LN}" = x ] && die "no ln?"
declare -r RM="`which rm`" 2>/dev/null
[ "x${RM}" = x ] && die "no rm?"

declare GDBTUI="`which gdbtui`" 2>/dev/null
if [ "x${GDBTUI}" = x ]; then
   GDBTUI="`which gdb`" 2>/dev/null
   if echo q | ${GDBTUI} -tui ; then
      GDBTUI="${GDBTUI} -tui"
   else
      die "no gdbtui?"
   fi
fi

set -e

declare VPATH=''
declare VPATH_ALREADY_EXISTED=false
#declare KILLED=false

#on_exit() {
#   if ${KILLED} ; then
#      if ! ${VPATH_ALREADY_EXISTED} ; then
#         # Don't destroy results created by a previous full run.
#         [ -n "${VPATH}" ] && [ -d "${VPATH}" ] && ${RM} -rf "${VPATH}"
#      fi
#   fi
#}
#trap 'on_exit' EXIT

#on_sigint() {
#   trap - SIGINT
#   KILLED=true
#   exit 99
#}
#trap 'on_sigint' SIGINT

declare SRCDIR=''

setup() {
   # This script is located in swval/sdk/scripts
   local -r SRCDIR="`cd ${PWD}/.. && pwd`"
   local -r reporoot="`cd ${SRCDIR}/../.. && pwd`"
   local -r gitdir="${reporoot}/.git"

   # Make sure we're being run from the right place.
   [ -e "${gitdir}" ] || die "${SCRIPT_NAME} must be run from the dir where it exists."

   local -r git_commit_hash="`${GIT} --git-dir=${gitdir} log -1 --format='%H%d'`"

   VPATH="${PWD}/gdb.${git_commit_hash:0:7}"
   if [ -d "${VPATH}" ]; then
      VPATH_ALREADY_EXISTED=true
   else
      ${MKDIR} -p "${VPATH}"
   fi

   if ! [ -f "${VPATH}/Makefile" ]; then
      # Make sure that the symlinks to common_hdrs exist.
      for x in "${reporoot}/aaluser/include/aalsdk" \
               "${reporoot}/aalkernel/include/aalsdk"
      do
         if ! [ -L "$x/kernel" ]; then
            pushd "$x" >/dev/null 2>&1
            ${LN} -s "../../../common_hdrs" kernel
            popd >/dev/null 2>&1
         fi
      done

      if ! [ -f "${SRCDIR}/configure" ]; then
         pushd "${SRCDIR}" >/dev/null 2>&1
         ${AUTORECONF} -vi
         popd >/dev/null 2>&1
      fi

      pushd "${VPATH}" >/dev/null 2>&1

      ${SRCDIR}/configure --with-gdb

      popd >/dev/null 2>&1
   fi

   pushd "${VPATH}" >/dev/null 2>&1

   ${MAKE}
   ${MAKE} DESTDIR="${VPATH}/myinst" install
   ${MAKE} check

   popd >/dev/null 2>&1

   printf "\n"
   printf "%s\n" "${git_commit_hash}"

   return 0
}

# $1  : exe to debug
# ... : program args
run_gdbtui() {
   local -r exe="$1"
   shift

   pushd "${VPATH}" >/dev/null 2>&1

   LD_LIBRARY_PATH="${VPATH}/myinst/usr/local/lib" \
      ${GDBTUI} \
      -quiet \
      -tty=${TTY:-'/dev/null'} \
      -d "${SRCDIR}" \
      -x "${VPATH}/gdb/gdbinit" \
      --args "${exe}" ${1+"$@"}

   popd >/dev/null 2>&1
}

setup

