# INTEL CONFIDENTIAL - For Intel Internal Use Only

die() {
   printf "die: %s\n" ${1+"$@"}
   exit 13
}

declare -r AUTORECONF="`which autoreconf 2>/dev/null`"
[ "x${AUTORECONF}" = x ] && die "no autoreconf?"
declare -r DISTCC="`which distcc 2>/dev/null`"
declare -r CHOWN="`which chown 2>/dev/null`"
[ "x${CHOWN}" = x ] && die "no chown?"
declare -r FIND="`which find 2>/dev/null`"
[ "x${FIND}" = x ] && die "no find?"
declare -r GIT="`which git 2>/dev/null`"
[ "x${GIT}" = x ] && die "no git?"
declare -r MAKE="`which make 2>/dev/null`"
[ "x${MAKE}" = x ] && die "no make?"
declare -r MKDIR="`which mkdir 2>/dev/null`"
[ "x${MKDIR}" = x ] && die "no mkdir?"
declare -r MKTEMP="`which mktemp 2>/dev/null`"
[ "x${MKTEMP}" = x ] && die "no mktemp?"
declare -r LN="`which ln 2>/dev/null`"
[ "x${LN}" = x ] && die "no ln?"
declare -r RM="`which rm 2>/dev/null`"
[ "x${RM}" = x ] && die "no rm?"
declare -r SED="`which sed 2>/dev/null`"
[ "x${SED}" = x ] && die "no sed?"
declare -r SUDO="`which sudo 2>/dev/null`"
[ "x${SUDO}" = x ] && die "no sudo?"

declare    LCOV="`which lcov 2>/dev/null`"
[ "x${LCOV}" = x ] && die "no lcov?"
declare    GENHTML="`which genhtml 2>/dev/null`"
[ "x${GENHTML}" = x ] && die "no genhtml?"

declare -r LCOV_VER=`lcov --version | ${SED} -re 's,.*(([0-9]+[.])+[0-9]+),\1,'`
declare -r LCOV_VER_MAJOR=`echo ${LCOV_VER} | ${SED} -re 's,([0-9]+)[.].*,\1,'`
declare -r LCOV_VER_MINOR=`echo ${LCOV_VER} | ${SED} -re 's,(([0-9]+)[.])([0-9]+)[.]?,\3,'`

if [ ${LCOV_VER_MAJOR} -ge 1 ] && [ ${LCOV_VER_MINOR} -ge 10 ]; then
   # lcov/genhtml 1.10 adds the --rc parameter and disables branch analysis by default.
   # This turns branch analysis back on, along with some other goodies..
   LCOV="${LCOV} --rc lcov_branch_coverage=1 --rc geninfo_auto_base=1 --ignore-errors source"
   GENHTML="${GENHTML} --rc genhtml_branch_coverage=1 --rc genhtml_num_spaces=3 --rc genhtml_legend=1 --rc genhtml_sort=1 --ignore-errors source"
else
   GENHTML="${GENHTML} --branch-coverage --function-coverage"
fi

set -e

declare VPATH=''
declare SRCDIR=''
declare KILLED=false

on_exit() {
   ${KILLED} && printf "=[\n"
}
trap 'on_exit' EXIT

on_sigint() {
   trap - SIGINT
   KILLED=true
   exit 99
}
trap 'on_sigint' SIGINT

# $1 : name of the application binary for which coverage is to be collected.
# $2 (optional) : whether distcc is requested.
setup() {
   local -r app="$1"
   shift
   local    wantdistcc=false

   if [ $# -gt 0 ]; then
      wantdistcc=$1
   fi

   # This script is located in swval/krnl/scripts
   SRCDIR="`cd ${PWD}/.. && pwd`"
   local -r reporoot="`cd ${SRCDIR}/../.. && pwd`"
   local -r gitdir="${reporoot}/.git"

   # Make sure we're being run from the right place.
   [ -e "${gitdir}" ] || die "${SCRIPT_NAME} must be run from the dir where it exists."

   local -r git_commit_hash="`${GIT} --git-dir=${gitdir} log -1 --format='%H%d'`"

   VPATH="${PWD}/coverage.${app}.${git_commit_hash:0:7}"
   if ! [ -d "${VPATH}" ]; then
      ${MKDIR} -p "${VPATH}"
   fi

   if ! [ -f "${VPATH}/Makefile" ]; then
      # Make sure that the symlinks to common_hdrs exist.
      for x in "${reporoot}/aaluser/include/aalsdk" \
               "${reporoot}/aalkernel/include/aalsdk"
      do
         if ! [ -L "$x/kernel" ]; then
            pushd "$x" >/dev/null 2>&1
            ${LN} -s "../../../common_hdrs" kernel
            popd >/dev/null 2>&1
         fi
      done

      if ! [ -f "${SRCDIR}/configure" ]; then
         pushd "${SRCDIR}" >/dev/null 2>&1
         ${AUTORECONF} -vi
         popd >/dev/null 2>&1
      fi

      pushd "${VPATH}" >/dev/null 2>&1

      ${SRCDIR}/configure --with-gcov

      popd >/dev/null 2>&1
   fi

   pushd "${VPATH}" >/dev/null 2>&1

   if ${wantdistcc} && [ "x${DISTCC}" != x ] && [ -d "${HOME}/distcc" ]; then
      PATH="${HOME}/distcc:${PATH}" ${MAKE} -j 250 ${MAKEOPTS:-} all
   else
      ${MAKE} ${MAKEOPTS:-} all
   fi

   popd >/dev/null 2>&1

   printf "\n"
   printf "%s\n" "${git_commit_hash}"

   printf "\n"
   printf "Resetting the kernel gcov counters..\n" "${git_commit_hash}"

   ${SUDO} ./reset-kernel-gcov-counters

   return 0
}

declare WHAT_TO_MEASURE=''

run_lcov() {
   local -r d="$1"
   local -r out="${VPATH}/lcov"

   [ -d "${out}/html" ] || ${MKDIR} -p "${out}/html"

   ${SUDO} ${LCOV} --capture \
           --output-file "${out}/${d}-base.info" \
           --initial \
           --base-directory "${VPATH}"

   ${SUDO} ${CHOWN} ${UID}:${UID} "${out}/${d}-base.info"

   ${WHAT_TO_MEASURE}

   ${SUDO} ${LCOV} --capture \
           --output-file "${out}/${d}-test.info" \
           --base-directory "${VPATH}"

   ${SUDO} ${CHOWN} ${UID}:${UID} "${out}/${d}-test.info"

   ${LCOV} --add-tracefile "${out}/${d}-base.info" \
           --add-tracefile "${out}/${d}-test.info" \
           --output-file "${out}/${d}-totals.info"

   ${GENHTML} --output-directory "${out}/html" \
              "${out}/${d}-totals.info"

   return 0
}

